Domanda 5. Struttura dati

Ho implementato mantenuto l'implementazione di elAttività e di attività (inserendo in quest'ultima la voce int assegnatoA; per il problema di ottimizzazione), 
cambiando invece la struct dipendenza, in cui viene effettuato un cambio dal nome dell'attività all'indice che questa invece ha. 
Questo permette un'implementazione efficace degli algoritmi successivi:

typedef struct{                 
    char succ[MAXC];
    char preced[MAXC];
    } dipendenza;

typedef struct { //Cambio dal nome dell'attività all'indice delle attività per ottimizzazione
    int succ; // nome dell’attività che dipende
    int preced;   // nome dell’attività da cui dipende
} Dipendenza;


Domanda 6. Problema di verifica

veniva richiesta l'implementazione della funzione int ACTcheckDep(ACT a), che effettuava un controllo per verificare le dipendenze.
Avendo cambiato struttura dati delle dipendenze, il codice implementato, che andava ad effettuare un confronto sui nomi risultava errato, oltre che
non ottimizzato, poichè occorreva effettuare il confronto con il nome dell'attività e successivamente controllare che il tempo di inizio non fosse
precedente al tempo di fine dell'attività da cui dipendeva.

Di seguito la funzione che utilizza la struttura dati Dipendenza implementata successivamente:
int ACTcheckDep(ACT a) {
for (int i = 0; i < a->nDip; i++) {
    int iDipSucc = a->dip[i].succ; 
    int iDipPrec = a->dip[i].preced;
    if (a->act[iDipSucc].tIni < a->act[iDipPrec].tFin) {
        return 0;
    }
} 
return 1;
}

veniva richiesta l'implementazione della funzione void ACTprintSrcSnk(ACT a), che avrebbe dovuto stampare a schermo la conferma che il grafo
delle dipendenze sia un DAG o un albero radicato (o foresta), oltre che stampare eventuali sorgenti (gradoIn = 0) e pozzi (gradoOut = 0),
eventuali radici (gradoIn = 0) e foglie(gradoOut = 0).

La differenziazione tra Dag e grafo avviene mediante il controllo per ogni vertice della presenza di più dipendenze.

void ACTprintSrcSnk(ACT a) {

    int *gradoIn = calloc(a->nAtt, sizeof(int)); //utilizzo un vettore allocato dinamicamente per determinare per ogni vertice, gli archi in ingresso
    int *gradoOut = calloc(a->nAtt, sizeof(int)); //utilizzo un vettore allocato dinamicamente per determinare per ogni vertice, gli archi in uscita
    
    // Conta gli archi in ingresso e in uscita per ogni attività
    for (int i = 0; i < a->nDip; i++) {
        int succ = a->dip[i].succ;
        int preced = a->dip[i].preced;
        gradoOut[succ]++; //incremento il numero di volte in cui, per l'attività all'indice succ, gli archi uscenti (dipendenze)
        gradoIn[preced]++; //incremento il numero di volte in cui, per l'attività all'indice preced, gli archi entranti
    }
    
    // Verifica se il grafo è una foresta (ogni attività ha al massimo un arco uscente)
    int mark = 0;
    for (int i = 0; i < a->nAtt; i++) {
        if (gradoOut[i] > 1) {
            mark++;
            break;
        }
    }
    
    if (!mark) {
        printf("Grafo delle dipendenze: DAG\n");
        printf("Sorgenti (attività con gradoIn == 0): ");
        for (int i = 0; i < a->nAtt; i++) {
            if (gradoIn[i] == 0)
                printf("%s ", a->act[i].nome);
        }
        printf("\nPozzi (attività con gradoOut == 0): ");
        for (int i = 0; i < a->nAtt; i++) {
            if (gradoOut[i] == 0)
                printf("%s ", a->act[i].nome);
        }
        printf("\n");
    } else {
        printf("Grafo delle dipendenze: Albero - Foresta\n");
        printf("Radici (attività con gradoIn == 0): ");
        for (int i = 0; i < a->nAtt; i++) {
            if (gradoIn[i] == 0)
                printf("%s ", a->act[i].nome);
        }
        printf("\nFoglie (attività con gradoOut == 0): ");
        for (int i = 0; i < a->nAtt; i++) {
            if (gradoOut[i] == 0)
                printf("%s ", a->act[i].nome);
        }
        printf("\n");
    }
    
    free(gradoIn);
    free(gradoOut);
}


Domanda 7. Problema di ricerca e ottimizzazione
Ho implementato la soluzione utilizzando l’approccio greedy che sfrutta l’ordinamento per tempo e una scelta locale ottimale per ogni attività,
esplorando solo parte dello spazio delle soluzioni.

veniva richiesta l'implementazione di int ACTminPers(ACT a), che determina il minimo numero di persone necessarie per svolgerle.
Ho quindi aggiunto le seguenti strutture dati per l'implementazione:

typedef struct { // struttura dati per implementare un evento
    int tempo;
    int tipoT; // +1: inizio, -1: fine
} Evento;

static int cmpEvento(const void *p1, const void *p2) { // funzione di comparazione per eventi
    const Evento *ev1 = (const Evento *)p1;
    const Evento *ev2 = (const Evento *)p2;
    if (ev1->tempo == ev2->tempo)
        return ev1->tipoT - ev2->tipoT;
    return ev1->tempo - ev2->tempo;
}

int ACTminPers(ACT a) {
    int nEventi = 2 * a->nAtt;
    Evento *eventi = malloc(nEventi * sizeof(Evento)); //utilizzo
    int ind = 0;
    for (int i = 0; i < a->nAtt; i++) {
        eventi[ind].tempo = a->act[i].tIni;
        eventi[ind].tipoT = 1;
        ind++;
        eventi[ind].tempo = a->act[i].tFin;
        eventi[ind].tipoT = -1;
        ind++;
    }
    
    qsort(eventi, nEventi, sizeof(Evento), cmpEvento);
    
    int curr = 0, maxPersone = 0;
    for (int i = 0; i < nEventi; i++) {
        curr += eventi[i].tipoT;
        if (curr > maxPersone)
            maxPersone = curr;
    }
    free(eventi);
    return maxPersone;
}

viene inoltre richiesta l'implementazione di void ACTbestPlan(ACT a).

Ho inserito una struttura dati apposita per implementare Persona, oltre che una struttura per l'inserimento dell'ordine delle attività e 
la funzione cmpordineAttività da utilizzare per l'ordinamento:

typedef struct {
    int attFine; // tempo di fine dell'ultima attività assegnata
    int costiTot;  // somma dei costi delle attività assegnate
} Persona;

typedef struct {
    int indice;
    int tInizio;
} ordineAttività;

static int cmpordineAttività(const void *p1, const void *p2) {
    const ordineAttività *att1 = (const ordineAttività *)p1;
    const ordineAttività *att2 = (const ordineAttività *)p2;
    return att1->tInizio - att2->tInizio;
}


void ACTbestPlan(ACT a) {
    int N = ACTminPers(a);
    
    // Struttura per rappresentare ciascuna persona.
    typedef struct {
        int attFine; // tempo di fine dell'ultima attività assegnata
        int costiTot;  // somma dei costi delle attività assegnate
    } Persona;
    
    Persona *pers = malloc(N * sizeof(Persona));
    for (int i = 0; i < N; i++) {
        pers[i].attFine = 0;  // tutti disponibili dal tempo 0
        pers[i].costiTot = 0;
    }
    
    // Creazione di un array per ordinare le attività in base al tempo di inizio.
    ordineAttività *ordine = malloc(a->nAtt * sizeof(ordineAttività));
    for (int i = 0; i < a->nAtt; i++) {
        ordine[i].indice = i;
        ordine[i].tInizio = a->act[i].tIni;
    }
    qsort(ordine, a->nAtt, sizeof(ordineAttività), cmpordineAttività);
    
    // Assegnazione greedy: per ogni attività, assegnare la persona disponibile con minore costo accumulato.
    for (int k = 0; k < a->nAtt; k++) {
        int ind = ordine[k].indice;
        int best = -1;
        for (int i = 0; i < N; i++) {
            if (pers[i].attFine <= a->act[ind].tIni) { // persona disponibile
                if (best == -1 || pers[i].costiTot < pers[best].costiTot)
                    best = i;
            }
        }
        if (best == -1) {
            // Questo caso non dovrebbe verificarsi se N è calcolato correttamente.
            printf("Errore: nessuna persona disponibile per l'attività %s\n", a->act[ind].nome);
            return -1;
        } else {
            a->act[ind].assegnatoA = best;
            pers[best].attFine = a->act[ind].tFin;
            pers[best].costiTot += a->act[ind].costo;
        }
    }
    
    // Stampiamo l'assegnazione per verificare il risultato.
    printf("Assegnazione attività:\n");
    for (int i = 0; i < a->nAtt; i++) {
        printf("Attività %s assegnata a persona %d\n", a->act[i].nome, a->act[i].assegnatoA);
    }
    
    free(ordine);
    free(pers);
}
